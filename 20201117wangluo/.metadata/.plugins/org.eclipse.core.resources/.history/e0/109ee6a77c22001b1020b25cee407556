package control;

import java.util.HashMap;
import jpcap.packet.*;

//数据包的解析
public class PacketAnalyze {
	static Packet packet;
	static HashMap<String,String> att,att1;
	public PacketAnalyze(Packet packet){
		this.packet = packet;	
	}
	public static HashMap<String,String> packetClass(){
		att1 = new HashMap<String,String>();
		if(packet.getClass().equals(ICMPPacket.class)){
			att1 = ICMPanalyze();
		}else if(packet.getClass().equals(TCPPacket.class)){
			att1 = TCPanalyze();
		}else if(packet.getClass().equals(UDPPacket.class)){
			att1 = UDPanalyze();
		}
		return att;
	}
	
	
	public static HashMap<String,String> ICMPanalyze(){
		att = new HashMap<String,String>();
		ICMPPacket icmppacket = (ICMPPacket) packet;
		att.put("协议", new String("ICMP"));
		att.put("源IP", icmppacket.src_ip.toString().substring(1, icmppacket.src_ip.toString().length()));
		att.put("目的IP", icmppacket.dst_ip.toString().substring(1, icmppacket.dst_ip.toString().length()));
		att.put("数据包长度", String.valueOf(icmppacket.length));
		return att;
	}
	public static HashMap<String,String> TCPanalyze(){
		att = new HashMap<String,String>();
		TCPPacket tcppacket = (TCPPacket) packet;
		EthernetPacket ethernetPacket=(EthernetPacket)packet.datalink;
		att.put("协议", new String("TCP"));
		att.put("源IP", tcppacket.src_ip.toString().substring(1, tcppacket.src_ip.toString().length()));
		att.put("源端口", String.valueOf(tcppacket.src_port));
		att.put("目的IP", tcppacket.dst_ip.toString().substring(1, tcppacket.dst_ip.toString().length()));
		att.put("目的端口", String.valueOf(tcppacket.dst_port));
		att.put("源MAC", ethernetPacket.getSourceAddress());
		att.put("目的MAC", ethernetPacket.getDestinationAddress());
		
		
		return att;
	}
	public static HashMap<String,String> UDPanalyze(){
		att = new HashMap<String,String>();
		UDPPacket udppacket = (UDPPacket) packet;
		EthernetPacket ethernetPacket=(EthernetPacket)packet.datalink;
		att.put("协议", new String("UDP"));
		att.put("源IP", udppacket.src_ip.toString().substring(1, udppacket.src_ip.toString().length()));
		att.put("源端口", String.valueOf(udppacket.src_port));
		att.put("目的IP", udppacket.dst_ip.toString().substring(1, udppacket.dst_ip.toString().length()));
		att.put("目的端口", String.valueOf(udppacket.dst_port));
		att.put("源MAC", ethernetPacket.getSourceAddress());
		att.put("目的MAC", ethernetPacket.getDestinationAddress());
	
		
	
		return att;
	}
}
